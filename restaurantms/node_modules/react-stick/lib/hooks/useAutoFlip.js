"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _invariant = _interopRequireDefault(require("invariant"));

var _react = require("react");

var _defaultPosition = require("../defaultPosition");

var _utils = require("../utils");

var useAutoFlip = function useAutoFlip(enableAutoHorizontalFlip, enableAutoVerticalFlip, initialPosition, initialAlign) {
  var _useState = (0, _react.useState)(initialPosition),
      currentPosition = _useState[0],
      setCurrentPosition = _useState[1];

  var _useState2 = (0, _react.useState)(initialAlign || (0, _utils.getDefaultAlign)(initialPosition)),
      currentAlign = _useState2[0],
      setCurrentAlign = _useState2[1];

  (0, _react.useEffect)(function () {
    setCurrentPosition(initialPosition);
    setCurrentAlign(initialAlign || (0, _utils.getDefaultAlign)(initialPosition));
  }, [initialAlign, initialPosition]);
  var checkAlignment = (0, _react.useCallback)(function (nodeRef, anchorRef) {
    var _autoFlipHorizontally = autoFlipHorizontally(nodeRef, anchorRef, {
      enabled: enableAutoHorizontalFlip,
      initialPosition: initialPosition,
      initialAlign: initialAlign,
      currentPosition: currentPosition,
      currentAlign: currentAlign
    }),
        horizontalPosition = _autoFlipHorizontally[0],
        horizontalAlign = _autoFlipHorizontally[1];

    var _autoFlipVertically = autoFlipVertically(nodeRef, anchorRef, {
      enabled: enableAutoVerticalFlip,
      initialPosition: initialPosition,
      initialAlign: initialAlign,
      currentPosition: horizontalPosition,
      currentAlign: horizontalAlign
    }),
        verticalPosition = _autoFlipVertically[0],
        verticalAlign = _autoFlipVertically[1];

    if (verticalPosition !== currentPosition) {
      setCurrentPosition(verticalPosition);
    }

    if (verticalAlign !== currentAlign) {
      setCurrentAlign(verticalAlign);
    }
  }, [currentAlign, currentPosition, enableAutoHorizontalFlip, enableAutoVerticalFlip, initialAlign, initialPosition]);
  return [currentPosition, currentAlign, checkAlignment];
};

var _default = useAutoFlip;
exports.default = _default;

var autoFlipVertically = function autoFlipVertically(nodeRef, anchorRef, _ref) {
  var enabled = _ref.enabled,
      initialPosition = _ref.initialPosition,
      currentPosition = _ref.currentPosition,
      initialAlign = _ref.initialAlign,
      currentAlign = _ref.currentAlign;

  if (!enabled) {
    return [currentPosition, currentAlign];
  }

  var positionedToBottom = (0, _utils.isPositionedToBottom)(currentPosition);
  var positionedToTop = (0, _utils.isPositionedToTop)(currentPosition);

  if ((0, _utils.isPositionedToBottom)(initialPosition)) {
    if ((0, _utils.fitsOnBottom)(nodeRef, anchorRef)) {
      if (!positionedToBottom) {
        return [switchToBottom(currentPosition), switchToTop(currentAlign)];
      }
    } else if ((0, _utils.fitsOnTop)(nodeRef, anchorRef) && !positionedToTop) {
      return [switchToTop(currentPosition), switchToBottom(currentAlign)];
    }
  }

  if ((0, _utils.isPositionedToTop)(initialPosition)) {
    if ((0, _utils.fitsOnTop)(nodeRef, anchorRef)) {
      if (!positionedToTop) {
        return [switchToTop(currentPosition), switchToBottom(currentAlign)];
      }
    } else if ((0, _utils.fitsOnBottom)(nodeRef, anchorRef) && !positionedToBottom) {
      return [switchToBottom(currentPosition), switchToTop(currentAlign)];
    }
  }

  return [currentPosition, currentAlign];
};

var autoFlipHorizontally = function autoFlipHorizontally(nodeRef, anchorRef, _ref2) {
  var enabled = _ref2.enabled,
      initialPosition = _ref2.initialPosition,
      currentPosition = _ref2.currentPosition,
      initialAlign = _ref2.initialAlign,
      currentAlign = _ref2.currentAlign;

  if (!enabled) {
    return [currentPosition, currentAlign];
  }

  var positionedToLeft = (0, _utils.isPositionedToLeft)(currentPosition);
  var positionedToRight = (0, _utils.isPositionedToRight)(currentPosition);

  if ((0, _utils.isPositionedToRight)(initialPosition)) {
    if ((0, _utils.fitsOnRight)(nodeRef, anchorRef)) {
      if (!positionedToRight) {
        return [switchToRight(currentPosition), switchToLeft(currentAlign)];
      }
    } else if ((0, _utils.fitsOnLeft)(nodeRef, anchorRef) && !positionedToLeft) {
      return [switchToLeft(currentPosition), switchToRight(currentAlign)];
    }
  }

  if ((0, _utils.isPositionedToLeft)(initialPosition)) {
    if ((0, _utils.fitsOnLeft)(nodeRef, anchorRef)) {
      if (!positionedToLeft) {
        return [switchToLeft(currentPosition), switchToRight(currentAlign)];
      }
    } else if ((0, _utils.fitsOnRight)(nodeRef, anchorRef) && !positionedToRight) {
      return [switchToRight(currentPosition), switchToLeft(currentAlign)];
    }
  }

  return [currentPosition, currentAlign];
};

var switchVerticalPosition = function switchVerticalPosition(position, target) {
  var newPosition = _defaultPosition.positions.find(function (standardPosition) {
    return standardPosition === target + " " + position.split(' ')[1];
  });

  (0, _invariant.default)(newPosition, "Could not determine new position. Old position \"" + position + "\", new vertical target \"" + target + "\"");
  return newPosition;
};

var switchHorizontalPosition = function switchHorizontalPosition(position, target) {
  var newPosition = _defaultPosition.positions.find(function (standardPosition) {
    return standardPosition === position.split(' ')[0] + " " + target;
  });

  (0, _invariant.default)(newPosition, "Could not determine new position. Old position \"" + position + "\", new horizontal target \"" + target + "\"");
  return newPosition;
};

var switchToBottom = function switchToBottom(position) {
  return switchVerticalPosition(position, 'bottom');
};

var switchToTop = function switchToTop(position) {
  return switchVerticalPosition(position, 'top');
};

var switchToLeft = function switchToLeft(position) {
  return switchHorizontalPosition(position, 'left');
};

var switchToRight = function switchToRight(position) {
  return switchHorizontalPosition(position, 'right');
};

module.exports = exports.default;