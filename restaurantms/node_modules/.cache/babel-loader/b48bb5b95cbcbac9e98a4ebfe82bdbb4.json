{"ast":null,"code":"import coerceSelection from './coerceSelection';\nvar EMPTY = {};\n\nvar memoize = function memoize(substyle) {\n  return function (select, defaultStyle) {\n    var cacheKey = defaultStyle || EMPTY;\n    substyle.memoize = substyle.memoize || new WeakMap();\n    var mapEntry;\n\n    if (!substyle.memoize.has(cacheKey)) {\n      mapEntry = {};\n      substyle.memoize.set(cacheKey, mapEntry);\n    } else {\n      mapEntry = substyle.memoize.get(cacheKey);\n    }\n\n    var selectHash = coerceSelection(select).join(' ');\n    return selectHash in mapEntry ? mapEntry[selectHash] : mapEntry[selectHash] = substyle(select || [], defaultStyle);\n  };\n};\n\nexport default memoize;","map":{"version":3,"sources":["/home/gokarna/Desktop/IOE/5th sem/Database Management Systems/project/Main Project/restaurantms/node_modules/substyle/es6/memoize.js"],"names":["coerceSelection","EMPTY","memoize","substyle","select","defaultStyle","cacheKey","WeakMap","mapEntry","has","set","get","selectHash","join"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,IAAIC,KAAK,GAAG,EAAZ;;AAEA,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AACvC,SAAO,UAAUC,MAAV,EAAkBC,YAAlB,EAAgC;AACrC,QAAIC,QAAQ,GAAGD,YAAY,IAAIJ,KAA/B;AACAE,IAAAA,QAAQ,CAACD,OAAT,GAAmBC,QAAQ,CAACD,OAAT,IAAoB,IAAIK,OAAJ,EAAvC;AACA,QAAIC,QAAJ;;AAEA,QAAI,CAACL,QAAQ,CAACD,OAAT,CAAiBO,GAAjB,CAAqBH,QAArB,CAAL,EAAqC;AACnCE,MAAAA,QAAQ,GAAG,EAAX;AACAL,MAAAA,QAAQ,CAACD,OAAT,CAAiBQ,GAAjB,CAAqBJ,QAArB,EAA+BE,QAA/B;AACD,KAHD,MAGO;AACLA,MAAAA,QAAQ,GAAGL,QAAQ,CAACD,OAAT,CAAiBS,GAAjB,CAAqBL,QAArB,CAAX;AACD;;AAED,QAAIM,UAAU,GAAGZ,eAAe,CAACI,MAAD,CAAf,CAAwBS,IAAxB,CAA6B,GAA7B,CAAjB;AACA,WAAOD,UAAU,IAAIJ,QAAd,GAAyBA,QAAQ,CAACI,UAAD,CAAjC,GAAgDJ,QAAQ,CAACI,UAAD,CAAR,GAAuBT,QAAQ,CAACC,MAAM,IAAI,EAAX,EAAeC,YAAf,CAAtF;AACD,GAdD;AAeD,CAhBD;;AAkBA,eAAeH,OAAf","sourcesContent":["import coerceSelection from './coerceSelection';\nvar EMPTY = {};\n\nvar memoize = function memoize(substyle) {\n  return function (select, defaultStyle) {\n    var cacheKey = defaultStyle || EMPTY;\n    substyle.memoize = substyle.memoize || new WeakMap();\n    var mapEntry;\n\n    if (!substyle.memoize.has(cacheKey)) {\n      mapEntry = {};\n      substyle.memoize.set(cacheKey, mapEntry);\n    } else {\n      mapEntry = substyle.memoize.get(cacheKey);\n    }\n\n    var selectHash = coerceSelection(select).join(' ');\n    return selectHash in mapEntry ? mapEntry[selectHash] : mapEntry[selectHash] = substyle(select || [], defaultStyle);\n  };\n};\n\nexport default memoize;"]},"metadata":{},"sourceType":"module"}