{"ast":null,"code":"var _jsxFileName = \"/home/gokarna/Desktop/IOE/5th sem/Database Management Systems/project/Main Project/restaurantms/src/js/Display/CustomDisplay.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useTransition, animated } from 'react-spring'; // props: gotdata\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomDisplay = props => {\n  const tableCols = props.columns.map(i => {\n    return /*#__PURE__*/_jsxDEV(\"th\", {\n      children: i\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }, this);\n  });\n\n  const rowRender2 = n => (props.self === undefined ? props.gotData.length > 0 ? Object.keys(props.gotData[0]) : [] : props.db2n).map(keys => {\n    if (keys === 'dob' && props.gotData[n][keys] !== null) {\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        children: props.gotData[n][keys].substring(0, 8) + (parseInt(props.gotData[n][keys].substring(8, 10)) + 1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        children: props.self === undefined ? props.gotData[n][keys] : keys\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this);\n    }\n  });\n\n  const rowRender = (props.gotData.length > 0 ? [...props.gotData.keys()] : []).map(index => {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: rowRender2(index)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '10%% 10% 10% 10%'\n    },\n    children: (() => {\n      if (!(props.gotData.length > 0)) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"No data found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 32\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table table-primary\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: tableCols\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: rowRender\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 32\n        }, this);\n      }\n    })()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 8\n  }, this);\n};\n\n_c = CustomDisplay;\nexport default CustomDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomDisplay\");","map":{"version":3,"sources":["/home/gokarna/Desktop/IOE/5th sem/Database Management Systems/project/Main Project/restaurantms/src/js/Display/CustomDisplay.js"],"names":["React","useEffect","useState","useTransition","animated","CustomDisplay","props","tableCols","columns","map","i","rowRender2","n","self","undefined","gotData","length","Object","keys","db2n","substring","parseInt","rowRender","index","padding"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,cAAxC,C,CAGA;;;;AAEA,MAAMC,aAAa,GAAEC,KAAD,IAAS;AAIzB,QAAMC,SAAS,GAAGD,KAAK,CAACE,OAAN,CAAcC,GAAd,CACbC,CAAD,IAAK;AACD,wBACI;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GALa,CAAlB;;AAQA,QAAMC,UAAU,GAAGC,CAAD,IAAM,CAACN,KAAK,CAACO,IAAN,KAAeC,SAAf,GAA4BR,KAAK,CAACS,OAAN,CAAcC,MAAd,GAAuB,CAAvB,GAA2BC,MAAM,CAACC,IAAP,CAAYZ,KAAK,CAACS,OAAN,CAAc,CAAd,CAAZ,CAA3B,GAA2D,EAAvF,GAA4FT,KAAK,CAACa,IAAnG,EAAyGV,GAAzG,CACnBS,IAAD,IAAQ;AACJ,QAAIA,IAAI,KAAK,KAAT,IAAkBZ,KAAK,CAACS,OAAN,CAAcH,CAAd,EAAiBM,IAAjB,MAA2B,IAAjD,EAAuD;AACnD,0BACI;AAAA,kBACKZ,KAAK,CAACS,OAAN,CAAcH,CAAd,EAAiBM,IAAjB,EAAuBE,SAAvB,CAAiC,CAAjC,EAAmC,CAAnC,KAAyCC,QAAQ,CAACf,KAAK,CAACS,OAAN,CAAcH,CAAd,EAAiBM,IAAjB,EAAuBE,SAAvB,CAAiC,CAAjC,EAAmC,EAAnC,CAAD,CAAR,GAAmD,CAA5F;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KAND,MAOI;AACF,0BACF;AAAA,kBACMd,KAAK,CAACO,IAAN,KAAeC,SAAf,GAA2BR,KAAK,CAACS,OAAN,CAAcH,CAAd,EAAiBM,IAAjB,CAA3B,GAAoDA;AAD1D;AAAA;AAAA;AAAA;AAAA,cADE;AAKD;AAEJ,GAjBmB,CAAxB;;AAoBA,QAAMI,SAAS,GAAG,CAAChB,KAAK,CAACS,OAAN,CAAcC,MAAd,GAAuB,CAAvB,GAA2B,CAAC,GAAGV,KAAK,CAACS,OAAN,CAAcG,IAAd,EAAJ,CAA3B,GAAuD,EAAxD,EAA4DT,GAA5D,CACbc,KAAD,IAAS;AACL,wBACI;AAAA,gBACKZ,UAAU,CAACY,KAAD;AADf;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAPa,CAAlB;AAWD,sBACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAZ;AAAA,cAEQ,CACI,MAAI;AACA,UAAG,EAAElB,KAAK,CAACS,OAAN,CAAcC,MAAd,GAAuB,CAAzB,CAAH,EAA+B;AAC3B,4BACI;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH,OAND,MAOI;AACA,4BACI;AAAA,iCAEI;AAAK,YAAA,SAAS,EAAC,qBAAf;AAAA,oCACC;AAAA,qCACI;AAAA,0BACKT;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADD,eAMC;AAAA,wBACKe;AADL;AAAA;AAAA;AAAA;AAAA,oBAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAeH;AACJ,KA1BL;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCF,CA7ED;;KAAMjB,a;AA+EN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useTransition, animated } from 'react-spring'\n\n\n// props: gotdata\n\nconst CustomDisplay=(props)=>{\n\n \n    \n    const tableCols = props.columns.map(\n        (i)=>{\n            return(\n                <th>{i}</th>\n            )\n        }\n    )\n\n    const rowRender2 =(n)=> (props.self === undefined ? (props.gotData.length > 0 ? Object.keys(props.gotData[0]) : []): props.db2n).map(\n        (keys)=>{\n            if (keys === 'dob' && props.gotData[n][keys] !== null ){\n                return(\n                    <td>\n                        {props.gotData[n][keys].substring(0,8) + (parseInt(props.gotData[n][keys].substring(8,10)) + 1)}\n                    </td>\n                )\n            }\n            else{\n              return (\n            <td>\n                {(props.self === undefined ? props.gotData[n][keys] : keys)}\n            </td>\n            )  \n            }\n            \n        }\n    )\n\n    const rowRender = (props.gotData.length > 0 ? [...props.gotData.keys()] : []).map(\n        (index)=>{\n            return(\n                <tr>\n                    {rowRender2(index)}\n                </tr>\n            )\n        }\n    )\n\n\n   return(\n       <div style={{padding:'10%% 10% 10% 10%'}}>\n           {\n               (\n                   ()=>{\n                       if(!(props.gotData.length > 0)){\n                           return(\n                               <div>\n                                   <h2>No data found</h2>\n                               </div>\n                           )\n                       }\n                       else{\n                           return(\n                               <div>\n                                    \n                                   <div className=\"table table-primary\">\n                                    <thead>\n                                        <tr>\n                                            {tableCols}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {rowRender}\n                                    </tbody>\n                                </div>\n                               </div>\n                           )\n                       }\n                   }\n               )()\n           }\n       </div>\n   )\n}\n\nexport default CustomDisplay;"]},"metadata":{},"sourceType":"module"}