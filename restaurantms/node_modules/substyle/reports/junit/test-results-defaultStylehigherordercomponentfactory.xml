<?xml version="1.0" encoding="UTF-8" ?>
<testsuites disabled="0" errors="0" failures="0" tests="13" time="0.63">
 <testsuite name="`defaultStyle` higher-order component factory" timestamp="2019-11-13T17:22:58" hostname="localhost" time="0.63" errors="0" tests="13" skipped="0" disabled="0" failures="0">
  <testcase classname="`defaultStyle` higher-order component factory" name="should inject a substyle instance for the `style` prop" time="0.193" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should merge styles provided by the component user with default styles" time="0.091" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should also work if a substyle instance is provided as `style`" time="0.025" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should accept a function mapping props to default styles as first argument" time="0.103" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should take a modifier selection function as second argument" time="0.005" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should apply the selected modifiers also on the style supplied by the user" time="0.031" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should give precedence to styles supplied by the user, regardless the modifiers specificity" time="0.008" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should support dependency injection via context for additional HOC to wrap the component" time="0.092" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should fix `style` prop type if injected HOC defines one (as Radium does)" time="0.003" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should expose the wrapped component instance via `getWrappedInstance`" time="0.003" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should support providing a props decorator function via context" time="0.03" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should allow passing a shouldUpdate function which is called with next and current props" time="0.008" />
  <testcase classname="`defaultStyle` higher-order component factory" name="should preserve previous default styles if shouldUpdate function returns false" time="0.036" />
 </testsuite>
</testsuites>